name: Build and Test

on:
  push:
    branches:
      - develop
      - kameo/develop
      - test
    tags:
      - "kameo-v*"

env:
  CI: true
  MONGO_URL: mongodb://mongo-svc:27017
  TOOL_NODE_FLAGS: --max_old_space_size=4096
  IMAGE_NAME: rocketchat
  ALIYUN_CR: registry.cn-qingdao.aliyuncs.com

jobs:
  check-alicr:
    runs-on: ubuntu-22.04
    outputs:
      alicr-uid-exist: ${{ steps.alicr-uid-env.outputs.defined }}
      alicr-pwd-exist: ${{ steps.alicr-pwd-env.outputs.defined }}
    steps:
      - id: alicr-uid-env
        env:
          ALICR_UID: ${{ secrets.ALICR_UID }}
        if: "${{ env.ALICR_UID != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT
      - id: alicr-pwd-env
        env:
          ALICR_PWD: ${{ secrets.ALICR_PWD }}
        if: "${{ env.ALICR_PWD != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT
  meteor-build:
    needs: [check-alicr]
    if: startsWith(github.ref, 'refs/pull/') != true && needs.check-alicr.outputs.alicr-uid-exist == 'true' && needs.check-alicr.outputs.alicr-pwd-exist == 'true'
    runs-on: ubuntu-22.04
    steps:

    - name: Github Info
      run: |
        echo "GITHUB_ACTION: $GITHUB_ACTION"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        echo "GITHUB_REF: $GITHUB_REF"
        echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
        echo "github.event_name: ${{ github.event_name }}"
        cat $GITHUB_EVENT_PATH

    - name: Use Node.js 12.22.1
      uses: actions/setup-node@v3
      with:
        node-version: "12.22.1"

    - uses: actions/checkout@v3

    - name: Free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: check package-lock
      run: |
        npx package-lock-check

    - name: Cache cypress
      id: cache-cypress
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/Cypress
        key: ${{ runner.OS }}-cypress-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}

    - name: Cache node modules
      id: cache-node-modules
      uses: actions/cache@v3
      with:
        path: |
          ./node_modules
        key: ${{ runner.OS }}-node_modules-4-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}

    - name: Cache meteor local
      uses: actions/cache@v3
      with:
        path: ./.meteor/local
        key: ${{ runner.OS }}-meteor_cache-${{ hashFiles('.meteor/versions', '.github/workflows/build_and_test.yml') }}

    - name: Cache meteor
      uses: actions/cache@v3
      with:
        path: ~/.meteor
        key: ${{ runner.OS }}-meteor-${{ hashFiles('.meteor/release', '.github/workflows/build_and_test.yml') }}

    - name: Install Meteor
      run: |
        # Restore bin from cache
        set +e
        METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
        METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
        set -e
        LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
        if [ -e $LAUNCHER ]
        then
          echo "Cached Meteor bin found, restoring it"
          sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
        else
          echo "No cached Meteor bin found."
        fi

        # only install meteor if bin isn't found
        command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

    - name: Versions
      run: |
        npm --versions
        node -v
        meteor --version
        meteor npm --versions
        meteor node -v
        git version

    - name: npm install
      if: steps.cache-node-modules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
      run: |
        meteor npm install

    # - run: meteor npm run lint

    # - run: meteor npm run translation-check

    # - name: Launch MongoDB
    #   uses: wbari/start-mongoDB@v0.2
    #   with:
    #     mongoDBVersion: "4.0"

    # - run: meteor npm run testunit

    # - run: meteor npm run typecheck

    - name: Reset Meteor
      if: startsWith(github.ref, 'refs/tags/') == 'true' || github.ref == 'refs/heads/develop'
      run: |
        meteor reset

    - name: Build Rocket.Chat
      run: |
        meteor build --server-only --directory /tmp/dist

    - name: Prepare build
      run: |
        mkdir /tmp/build
        cd /tmp/dist
        tar czf /tmp/dist/Rocket.Chat.tar.gz bundle
        mv /tmp/dist/Rocket.Chat.tar.gz /tmp/build/Rocket.Chat.tar.gz

    - name: Store build
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: /tmp/build

  docker-publish:
    runs-on: ubuntu-22.04
    needs: meteor-build
    
    steps:
    - uses: actions/checkout@v3
    - name: Login to Aliyun Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.ALIYUN_CR }}
        username: ${{ secrets.ALICR_UID }}
        password: ${{ secrets.ALICR_PWD }}

    - name: Restore build
      uses: actions/download-artifact@v3
      with:
        name: build
        path: /tmp/build/

    - name: Unpack build
      run: |
        cd /tmp/build
        tar xzf Rocket.Chat.tar.gz
        rm Rocket.Chat.tar.gz

        DOCKER_PATH="${GITHUB_WORKSPACE}/.docker"
        # if [[ '${{ matrix.release }}' = 'preview' ]]; then
        #   DOCKER_PATH="${DOCKER_PATH}-mongo"
        # fi;

        # echo "Build ${{ matrix.release }} Docker image"
        cp ${DOCKER_PATH}/Dockerfile .
        if [ -e ${DOCKER_PATH}/entrypoint.sh ]; then
          cp ${DOCKER_PATH}/entrypoint.sh .
        fi;

    - name: Build Docker image for tag
      run: |
        cd /tmp/build
        TAG_NAME=$GITHUB_REF_NAME-${GITHUB_SHA: 0:8}
        if [ "$GITHUB_REF" == "refs/heads/kameo/develop" ] || [ "$GITHUB_REF" == "refs/heads/develop" ] || [ "$GITHUB_REF" == "refs/heads/test" ]; then
          TAG_NAME="kameo-develop-${GITHUB_SHA: 0:8}"
        fi

        IMAGE=${{env.ALIYUN_CR}}/paiya/${{env.IMAGE_NAME}}:${TAG_NAME}
        echo "Build Docker image: '${IMAGE}', tag: '${TAG_NAME}'"

        docker build -t ${IMAGE} .
        docker push ${IMAGE}

        OLD_IMAGE=$IMAGE
        IMAGE=${{env.ALIYUN_CR}}/goduck/${{env.IMAGE_NAME}}:${TAG_NAME}
        echo "Build Docker image: '${IMAGE}', tag: '${TAG_NAME}'"

        docker tag ${OLD_IMAGE} ${IMAGE}
        docker push ${IMAGE}
