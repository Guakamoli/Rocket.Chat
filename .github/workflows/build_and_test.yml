name: Build and Test

on:
  push:
    branches:
      - develop
      - kameo/develop
      - test
    tags:
      - "kameo-v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CI: true
  MONGO_URL: mongodb://localhost:27017/rocketchat?replicaSet=rs0&directConnection=true
  MONGO_OPLOG_URL: mongodb://mongodb:27017/local?replicaSet=rs0&directConnection=true
  TOOL_NODE_FLAGS: --max_old_space_size=4096
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  ALIYUN_CR: registry.cn-qingdao.aliyuncs.com

jobs:
  release-versions:
    runs-on: ubuntu-latest
    outputs:
      gh-docker-tag: ${{ steps.docker.outputs.gh-docker-tag }}
    steps:
      - id: docker
        run: |
          DOCKER_TAG="gh-${{ github.run_id }}"
          echo "DOCKER_TAG: ${DOCKER_TAG}"
          echo "::set-output name=gh-docker-tag::${DOCKER_TAG}"

  check-alicr:
    runs-on: ubuntu-latest
    outputs:
      alicr-uid-exist: ${{ steps.alicr-uid-env.outputs.defined }}
      alicr-pwd-exist: ${{ steps.alicr-pwd-env.outputs.defined }}
    steps:
      - id: alicr-uid-env
        env:
          ALICR_UID: ${{ secrets.ALICR_UID }}
        if: "${{ env.ALICR_UID != '' }}"
        run: echo "::set-output name=defined::true"
      - id: alicr-pwd-env
        env:
          ALICR_PWD: ${{ secrets.ALICR_PWD }}
        if: "${{ env.ALICR_PWD != '' }}"
        run: echo "::set-output name=defined::true"

  build:
    needs: [check-alicr]
    if: startsWith(github.ref, 'refs/pull/') != true && needs.check-alicr.outputs.alicr-uid-exist == 'true' && needs.check-alicr.outputs.alicr-pwd-exist == 'true'
    runs-on: ubuntu-20.04

    steps:
      - name: Github Info
        run: |
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "github.event_name: ${{ github.event_name }}"
          cat $GITHUB_EVENT_PATH

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 4

      - uses: actions/checkout@v3

      - name: Use Node.js 14.19.3
        uses: actions/setup-node@v3
        with:
          node-version: '14.19.3'
          cache: 'yarn'

      - name: Free disk space
        run: |
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - name: Cache meteor local
        uses: actions/cache@v2
        with:
          path: ./apps/meteor/.meteor/local
          key: meteor-local-cache-${{ runner.OS }}-${{ hashFiles('apps/meteor/.meteor/versions') }}
          restore-keys: |
            meteor-local-cache-${{ runner.os }}-

      - name: Cache meteor
        uses: actions/cache@v2
        with:
          path: ~/.meteor
          key: meteor-cache-${{ runner.OS }}-${{ hashFiles('apps/meteor/.meteor/release') }}
          restore-keys: |
            meteor-cache-${{ runner.os }}-

      - name: Install Meteor
        run: |
          # Restore bin from cache
          set +e
          METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
          METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
          set -e
          LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
          if [ -e $LAUNCHER ]
          then
            echo "Cached Meteor bin found, restoring it"
            sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
          else
            echo "No cached Meteor bin found."
          fi

          # only install meteor if bin isn't found
          command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

      - name: Versions
        run: |
          npm --versions
          yarn -v
          node -v
          meteor --version
          meteor npm --versions
          meteor node -v
          git version

      - name: yarn install
        run: yarn

      - name: TurboRepo local server
        uses: felixmosh/turborepo-gh-artifacts@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          server-token: ${{ secrets.TURBO_SERVER_TOKEN }}

      - name: Lint
        run: yarn lint --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team='guakamoli-liangxianfeng'

      - name: Translation check
        run: yarn turbo run translation-check --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team='guakamoli-liangxianfeng'

      - name: TS typecheck
        run: yarn turbo run typecheck --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team='guakamoli-liangxianfeng'

      - name: Reset Meteor
        if: startsWith(github.ref, 'refs/tags/') == 'true' || github.ref == 'refs/heads/kameo/develop' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/test'
        run: |
          cd ./apps/meteor
          meteor reset

      - name: Build Rocket.Chat
        if: startsWith(github.ref, 'refs/pull/') != true
        run: yarn build:ci --api="http://127.0.0.1:9080" -- --directory dist

      - name: Prepare build
        run: |
          cd apps/meteor/dist
          tar czf /tmp/Rocket.Chat.tar.gz bundle

      - name: Store build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: /tmp/Rocket.Chat.tar.gz

  build-docker-preview:
    runs-on: ubuntu-20.04
    needs: [build, release-versions]
    if: startsWith(github.ref, 'refs/tags/kameo-v') || github.ref == 'refs/heads/kameo/develop' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Restore build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: /tmp/build

      - name: Unpack build
        run: |
          cd /tmp/build
          tar xzf Rocket.Chat.tar.gz
          rm Rocket.Chat.tar.gz

      - name: Build Docker image
        id: build-docker-image-preview
        uses: ./.github/actions/build-docker-image
        with:
          root-dir: /tmp/build
          docker-tag: ${{ needs.release-versions.outputs.gh-docker-tag }}
          username: ${{ secrets.ALICR_UID }}
          password: ${{ secrets.ALICR_PWD }}
          registry: ${{ env.ALIYUN_CR }}

  test:
    runs-on: ubuntu-20.04
    needs: [build, release-versions]

    strategy:
      matrix:
        node-version: ['14.19.3']
        mongodb-version: ['4.2', '4.4', '5.0']

    steps:
      - name: Launch MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
          mongodb-replica-set: rs0

      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: yarn install
        run: yarn

      - name: TurboRepo local server
        uses: felixmosh/turborepo-gh-artifacts@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          server-token: ${{ secrets.TURBO_SERVER_TOKEN }}

      - name: Unit Test
        run: yarn testunit --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team='guakamoli-liangxianfeng'

      - name: Restore build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: /tmp/build

      - name: Unpack build
        run: |
          cd /tmp/build
          tar xzf Rocket.Chat.tar.gz
          rm Rocket.Chat.tar.gz

      - name: Start containers
        env:
          MONGO_URL: 'mongodb://host.docker.internal:27017/rocketchat?replicaSet=rs0&directConnection=true'
          MONGO_OPLOG_URL: 'mongodb://mongodb:27017/local?replicaSet=rs0&directConnection=true'
        run: |
          export RC_DOCKERFILE="${{ github.workspace }}/apps/meteor/.docker/Dockerfile"
          export RC_DOCKER_TAG="${{ needs.release-versions.outputs.gh-docker-tag }}"
          export RC_DOCKER_REGISTRY="${{ env.ALIYUN_CR }}"

          docker compose -f docker-compose-ci.yml up -d --build rocketchat

          sleep 10

          until echo "$(docker compose -f docker-compose-ci.yml logs rocketchat)" | grep -q "SERVER RUNNING"; do
            echo "Waiting Rocket.Chat to start up"
            ((c++)) && ((c==10)) && docker compose -f docker-compose-ci.yml logs rocketchat && exit 1
            sleep 10
          done

      - name: E2E Test API
        run: |
          docker ps
          docker compose -f docker-compose-ci.yml logs rocketchat --tail=50

          cd ./apps/meteor
          for i in $(seq 1 5); do
            npm run testapi && s=0 && break || s=$?

            docker compose -f ../../docker-compose-ci.yml logs rocketchat --tail=100

            docker compose -f ../../docker-compose-ci.yml stop rocketchat

            docker exec mongodb mongo rocketchat --eval 'db.dropDatabase()'

            NOW=$(date "+%Y-%m-%dT%H:%M:%SZ")

            docker compose -f ../../docker-compose-ci.yml start rocketchat

            until echo "$(docker compose -f ../../docker-compose-ci.yml logs rocketchat --since $NOW)" | grep -q "SERVER RUNNING"; do
              echo "Waiting Rocket.Chat to start up"
              ((c++)) && ((c==10)) && exit 1
              sleep 10
            done;
          done;
          exit $s

      - name: Cache Playwright binaries
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
          # This is the version of Playwright that we are using, if you are willing to upgrade, you should update this.
          key: playwright-1.23.1

      - name: Install Playwright
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: |
          cd ./apps/meteor
          npx playwright install --with-deps

      - name: E2E Test UI
        run: |
          docker ps
          docker compose -f docker-compose-ci.yml logs rocketchat --tail=50

          docker exec mongodb mongo rocketchat --eval 'db.dropDatabase()'

          NOW=$(date "+%Y-%m-%dT%H:%M:%SZ")

          docker compose -f docker-compose-ci.yml restart rocketchat

          until echo "$(docker compose -f docker-compose-ci.yml logs rocketchat --since $NOW)" | grep -q "SERVER RUNNING"; do
            echo "Waiting Rocket.Chat to start up"
            ((c++)) && ((c==10)) && exit 1
            sleep 10
          done

          cd ./apps/meteor
          yarn test:e2e

      - name: Store playwright test trace
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-test-trace
          path: ./apps/meteor/tests/e2e/.playwright*

  docker-image-publish:
    runs-on: ubuntu-20.04
    needs: [build-docker-preview, release-versions]
    steps:
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ALIYUN_CR }}
          username: ${{ secrets.ALICR_UID }}
          password: ${{ secrets.ALICR_PWD }}
      - name: Get Docker image name
        id: gh-docker
        run: |
          GH_IMAGE_NAME="${{ env.ALIYUN_CR }}/paiya/rocketchat:${{ needs.release-versions.outputs.gh-docker-tag }}"

          echo "GH_IMAGE_NAME: $GH_IMAGE_NAME"

          echo "::set-output name=gh-image-name::${GH_IMAGE_NAME}"

      - name: Pull Docker image
        run: docker pull ${{ steps.gh-docker.outputs.gh-image-name }}

      - name: Publish Docker image
        run: |
          TAG_NAME=$GITHUB_REF_NAME-${GITHUB_SHA: 0:7}
          if [ "$GITHUB_REF" == "refs/heads/kameo/develop" ] || [ "$GITHUB_REF" == "refs/heads/develop" ] || [ "$GITHUB_REF" == "refs/heads/test" ]; then
            TAG_NAME="kameo-develop-${GITHUB_SHA: 0:7}"
          fi

          IMAGE_NAME=${{ env.ALIYUN_CR }}/paiya/rocketchat:$TAG_NAME
          echo "Build Docker image: '$IMAGE_NAME', tag: '$TAG_NAME'"

          docker tag ${{ steps.gh-docker.outputs.gh-image-name }} $IMAGE_NAME
          docker push $IMAGE_NAME
